//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteCalculadora.CalculadoraService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculadoraService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sumar", ReplyAction="http://tempuri.org/IService1/SumarResponse")]
        double Sumar(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sumar", ReplyAction="http://tempuri.org/IService1/SumarResponse")]
        System.Threading.Tasks.Task<double> SumarAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Restar", ReplyAction="http://tempuri.org/IService1/RestarResponse")]
        double Restar(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Restar", ReplyAction="http://tempuri.org/IService1/RestarResponse")]
        System.Threading.Tasks.Task<double> RestarAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiplicar", ReplyAction="http://tempuri.org/IService1/MultiplicarResponse")]
        double Multiplicar(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiplicar", ReplyAction="http://tempuri.org/IService1/MultiplicarResponse")]
        System.Threading.Tasks.Task<double> MultiplicarAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Dividir", ReplyAction="http://tempuri.org/IService1/DividirResponse")]
        double Dividir(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Dividir", ReplyAction="http://tempuri.org/IService1/DividirResponse")]
        System.Threading.Tasks.Task<double> DividirAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Potencia", ReplyAction="http://tempuri.org/IService1/PotenciaResponse")]
        double Potencia(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Potencia", ReplyAction="http://tempuri.org/IService1/PotenciaResponse")]
        System.Threading.Tasks.Task<double> PotenciaAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Modulo", ReplyAction="http://tempuri.org/IService1/ModuloResponse")]
        double Modulo(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Modulo", ReplyAction="http://tempuri.org/IService1/ModuloResponse")]
        System.Threading.Tasks.Task<double> ModuloAsync(double a, double b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClienteCalculadora.CalculadoraService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClienteCalculadora.CalculadoraService.IService1>, ClienteCalculadora.CalculadoraService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sumar(double a, double b) {
            return base.Channel.Sumar(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SumarAsync(double a, double b) {
            return base.Channel.SumarAsync(a, b);
        }
        
        public double Restar(double a, double b) {
            return base.Channel.Restar(a, b);
        }
        
        public System.Threading.Tasks.Task<double> RestarAsync(double a, double b) {
            return base.Channel.RestarAsync(a, b);
        }
        
        public double Multiplicar(double a, double b) {
            return base.Channel.Multiplicar(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicarAsync(double a, double b) {
            return base.Channel.MultiplicarAsync(a, b);
        }
        
        public double Dividir(double a, double b) {
            return base.Channel.Dividir(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DividirAsync(double a, double b) {
            return base.Channel.DividirAsync(a, b);
        }
        
        public double Potencia(double a, double b) {
            return base.Channel.Potencia(a, b);
        }
        
        public System.Threading.Tasks.Task<double> PotenciaAsync(double a, double b) {
            return base.Channel.PotenciaAsync(a, b);
        }
        
        public double Modulo(double a, double b) {
            return base.Channel.Modulo(a, b);
        }
        
        public System.Threading.Tasks.Task<double> ModuloAsync(double a, double b) {
            return base.Channel.ModuloAsync(a, b);
        }
    }
}
